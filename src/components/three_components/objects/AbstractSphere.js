/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF, MeshDistortMaterial } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useEffect } from 'react';

const filePath = window.location.href + '/models/AbstractSphere.glb'

export default function AbstractSphere(props) {
  const group = useRef()
  const { nodes } = useGLTF(filePath)
  const randomRotationOffset = Math.random() * 180

  useEffect(() => {
    group.current.position.x = props.animationOffset ? props.animationOffset[0] : 0
    group.current.position.z = props.animationOffset ? props.animationOffset[2] : 0
    group.current.rotation.x = randomRotationOffset
    group.current.rotation.y = randomRotationOffset
    group.current.rotation.z = randomRotationOffset
  });

  useFrame(({ clock }) => {
    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2
    group.current.position.y = (t / 3) + props.animationOffset ? props.animationOffset[1] : 0
    group.current.rotation.x = group.current.rotation.z += 0.005
  })

  return (
    <group ref={group} {...props} dispose={null} position={[0,1.2,0]}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere003.geometry}
        material={nodes.Icosphere003.material}
        scale={[1.06, 1.06, 1.06]}
      >
        <mesh geometry={nodes.Icosphere003.geometry} castShadow receiveShadow>
          <MeshDistortMaterial color={props.color} flatShading roughness={1} metalness={0.5} factor={15} speed={5} />
        </mesh>
        <mesh geometry={nodes.Icosphere003.geometry}>
          <meshBasicMaterial wireframe color={props.color}/>
        </mesh>
      </mesh>
    </group>
  )
}

useGLTF.preload(filePath)
